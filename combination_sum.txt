void fun(int i,vector<vector<int>>&ans,vector<int>ds,vector<int>&v,int target)
    {
        // check index 
        if(i==v.size())
        {
            if(target==0)
            {
                ans.push_back(ds);
            }
            return ;
         }
        if(v[i]<=target)
        {
            ds.push_back(v[i]);
            fun(i,ans,ds,v,target-v[i]);
            ds.pop_back();// backtrack step
        }
        fun(i+1,ans,ds,v,target);
        
        
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>ds;
        fun(0,ans,ds,candidates,target);
        return ans;
        
    }